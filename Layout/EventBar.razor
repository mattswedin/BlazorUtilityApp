@using UtilityBlazorApp.Models
@using System;
@inject IJSRuntime JSRuntime
@inject HttpClient Http


<div class="nav">
    <h6>@userDate</h6>
    <img src=@weatherIcon alt="">
    <h6>@userWeather</h6>
</div>

<h4 class=" mt-2 text-sm text-blue-500 text-center">@catFact</h4>

@code {

    private string userDate = "Date Loading!";
    private string userWeather = "Weather Loading!";
    private string weatherIcon = "";

    private string catFact = "CatFact Loading!";

    private async Task GetLocalDateTime()
    {
        string userDateTimeTemp = await JSRuntime.InvokeAsync<string>("getUserDateTime");
        string[] dateArr = userDateTimeTemp.Split(" ").Take(3).ToArray();
        userDate = string.Join(" ", dateArr);
        
         StateHasChanged();
    }

    private async Task GetWeather()
    {

        Location location = await JSRuntime.InvokeAsync<Location>("getLocation");

        string apiKey = "f8bb777f33ea63b9d279cc04b0566773";
        string apiURL = $"https://api.openweathermap.org/data/2.5/weather?lat={location.Lat}&lon={location.Lon}&appid={apiKey}";

        WeatherDetails weatherObj = await Http.GetFromJsonAsync<WeatherDetails>(apiURL) ?? new WeatherDetails();
        
        string weatherIconID = weatherObj.Weather?.FirstOrDefault()?.Icon ?? "Unknown";
        weatherIcon = $"https://openweathermap.org/img/wn/{weatherIconID}.png";

        userWeather = $"Weather: {weatherObj.Weather?.FirstOrDefault()?.Main ?? "Unknown"}, Temp: {Math.Round((weatherObj.Main?.Temp ?? 0) * 1.8 - 459.67)}F";
        
         StateHasChanged();
     
    }

    private async Task GetCatFact()
    {
        string apiURL = "https://cat-fact.herokuapp.com/facts";
        List<CatFact> catFactRes = await Http.GetFromJsonAsync<List<CatFact>>(apiURL) ?? new List<CatFact>();
        int randomInt = new Random().Next(0, catFactRes.Count - 1);
        catFact = catFactRes[randomInt].Text ?? "";
        
        StateHasChanged();
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalDateTime();
            await GetWeather();
            await GetCatFact();
        }

       
    }
}